name: Build EWDK Toolkit on Linux

on:
  push:
    branches: [ master ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'

jobs:
  build-ewdk:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Go环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0-rc.1'

      - name: 安装基础依赖
        run: |
          sudo apt update
          sudo apt install -y zstd fuseiso p7zip-full git build-essential aria2
          
          # 智能检查ZSTD版本
          ZSTD_VERSION=$(zstd --version | head -1 | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
          echo "ℹ️ 系统 ZSTD 版本: $ZSTD_VERSION"
          
          # 仅当版本低于1.4.2时才安装新版
          if [[ "$(echo $ZSTD_VERSION | sed 's/v//;s/\.//g')" -lt "10402" ]]; then
            echo "🔄 安装新版 ZSTD（当前版本较低）"
            git clone https://github.com/facebook/zstd.git /tmp/zstd
            cd /tmp/zstd
            make -j$(nproc)
            sudo make install
            sudo ldconfig
          else
            echo "✅ 系统 ZSTD 版本足够新，跳过编译安装"
          fi

      - name: 获取并设置EWDK URL
        id: set-url
        run: go run scripts/get_ewdk_url.go

      - name: 下载ISO
        run: |
          # 清理URL中的不可见字符
          CLEAN_URL=$(echo "${{ env.EWDK_ISO_URL }}" | tr -d '[:space:]')
          echo "✅ 清理后下载URL: $CLEAN_URL"
          
          # 安全下载命令
          aria2c \
            -x 16 -s 64 -k 4M \
            -j 16 \
            -c "$CLEAN_URL" \
            -d /tmp -o ewdk.iso \
            --file-allocation=prealloc \
            --retry-wait=1 \
            --max-tries=3 \
            --min-split-size=10M \
            --log=/tmp/aria2.log \
            --summary-interval=1 \
            --check-certificate=false  # 避免SSL问题
          
          # 验证下载文件
          FILE_SIZE=$(stat -c%s /tmp/ewdk.iso)
          if [ $FILE_SIZE -lt 500000000 ]; then
            echo "❌ 错误: 文件太小 (仅 $((FILE_SIZE/1000000)) MB)"
            exit 1
          fi
          
          # 计算实际下载速度
          if [ -f /tmp/aria2.log ]; then
            AVG_SPEED=$(grep 'Download Results' -A 2 /tmp/aria2.log | awk '/MiB\/s/ {print $3}')
            echo "⚡ 平均下载速度: $AVG_SPEED MiB/s"
          fi
          
          echo "✔️ ISO下载完成 ($((FILE_SIZE/1000000)) MB)"
          echo "iso_path=/tmp/ewdk.iso" >> $GITHUB_ENV
          
          # 立即清除下载URL环境变量
          echo "EWDK_ISO_URL=" >> $GITHUB_ENV
          echo "✅ 已清除下载URL环境变量"

      - name: 挂载ISO
        run: |
          sudo mkdir -p /mnt/ewdk
          sudo mount -o loop /tmp/ewdk.iso /mnt/ewdk
          echo "✅ ISO挂载完成"

      - name: 安装Go模块
        run: |
          go mod tidy

      - name: 运行提取程序
        timeout-minutes: 30
        run: |
          go run .

      - name: 创建wdk压缩包
        run: |
          # 使用智能选择的压缩级别
          if zstd -22 -T0 -h >/dev/null 2>&1; then
            COMPRESS_LEVEL="--ultra -22"
          else
            COMPRESS_LEVEL="-19"
          fi
          echo "ℹ️ 使用压缩级别: $COMPRESS_LEVEL"
          
          tar cf - dist/wdk | zstd $COMPRESS_LEVEL -T0 -o /tmp/wdk.tar.zst
          
          ARCHIVE_SIZE=$(stat -c%s /tmp/wdk.tar.zst)
          echo "✔️ 压缩完成: $((ARCHIVE_SIZE/1000000)) MB"
          echo "wdk_path=/tmp/wdk.tar.zst" >> $GITHUB_ENV

      - name: 上传wdk成品
        uses: actions/upload-artifact@v4
        with:
          name: wdk.tar.zst
          path: ${{ env.wdk_path }}
          retention-days: 7
          compression-level: 0

      - name: 创建sdk压缩包
        run: |
          # 使用智能选择的压缩级别
          if zstd -22 -T0 -h >/dev/null 2>&1; then
            COMPRESS_LEVEL="--ultra -22"
          else
            COMPRESS_LEVEL="-19"
          fi
          echo "ℹ️ 使用压缩级别: $COMPRESS_LEVEL"
          
          tar cf - dist/sdk | zstd $COMPRESS_LEVEL -T0 -o /tmp/sdk.tar.zst
          
          ARCHIVE_SIZE=$(stat -c%s /tmp/sdk.tar.zst)
          if [ $ARCHIVE_SIZE -lt 100000000 ]; then
            echo "❌ 错误: 压缩包太小 (仅 $((ARCHIVE_SIZE/1000000)) MB)"
            exit 1
          fi
          echo "✔️ 压缩完成: $((ARCHIVE_SIZE/1000000)) MB"
          echo "sdk_path=/tmp/sdk.tar.zst" >> $GITHUB_ENV

      - name: 上传sdk成品
        uses: actions/upload-artifact@v4
        with:
          name: sdk.tar.zst
          path: ${{ env.sdk_path }}
          retention-days: 7
          compression-level: 0

      - name: 清理资源
        run: |
          sudo umount /mnt/ewdk || true
          sudo rm -rf /mnt/ewdk
          rm -f /tmp/ewdk.iso
          rm -f /tmp/wdk.tar.zst
          rm -f /tmp/sdk.tar.zst
          sudo rm -rf /tmp/zstd
          rm -f /tmp/aria2.log
